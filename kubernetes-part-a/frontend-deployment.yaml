# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   annotations:
#     kompose.cmd: ./kompose convert -o kuber2
#     kompose.version: 1.31.2 (a92241f79)
#   creationTimestamp: null
#   labels:
#     io.kompose.service: frontend
#   name: frontend
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       io.kompose.service: frontend
#   strategy: {}
#   template:
#     metadata:
#       annotations:
#         kompose.cmd: ./kompose convert -o kuber2
#         kompose.version: 1.31.2 (a92241f79)
#       creationTimestamp: null
#       labels:
#         io.kompose.network/services-frontend-network: "true"
#         io.kompose.service: frontend
#     spec:
#       containers:
#         - image: olhaya/frontend:multiarch
#           livenessProbe:
#             exec:
#               command:
#                 - curl
#                 - -f
#                 - http://localhost:3000
#             failureThreshold: 5
#             initialDelaySeconds: 30
#             periodSeconds: 10
#             timeoutSeconds: 5
#           name: frontend
#           ports:
#             - containerPort: 3000
#               hostPort: 3000
#               protocol: TCP
#           resources: {}
#           volumeMounts:
#             - mountPath: /config/frontend-config.env
#               name: frontend-config
#               subPath: frontend-config.env
#       restartPolicy: Always
#       volumes:
#         - configMap:
#             items:
#               - key: frontend-config.env
#                 path: frontend-config.env
#             name: frontend-config
#           name: frontend-config
# status: {}




apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: olhaya/frontend:multiarch  # Użyj odpowiedniego obrazu
          ports:
            - containerPort: 3000
          env:
            - name: HOST
              value: "0.0.0.0"  # Nasłuchiwanie na wszystkie interfejsy
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 3
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 3
            timeoutSeconds: 2
          resources:
            requests:
              cpu: "100m"   # Minima CPU wymagane do uruchomienia
              memory: "200Mi"
            limits:
              cpu: "200m"   # Maksymalna ilość CPU
              memory: "400Mi"
      restartPolicy: Always
