---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert -o kubernetes-part
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: backend
  name: backend
spec:
  ports:
    - name: "3001"
      port: 3001
      targetPort: 3001
  selector:
    io.kompose.service: backend
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert -o kubernetes-part
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: frontend
  name: frontend
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    io.kompose.service: frontend
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert -o kubernetes-part
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: keycloak
  name: keycloak
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: keycloak
status:
  loadBalancer: {}

---
apiVersion: v1
data:
  pg-password: cGFzc3dvcmQ=
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: pg-password
  name: pg-password
type: Opaque

---
apiVersion: v1
data:
  kc-admin-password: YWRtaW4=
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: kc-admin-password
  name: kc-admin-password
type: Opaque

---
apiVersion: v1
data:
  jwt-private-key: TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFzUDZmcDNzbTYwcFFNd0JwNkU3T3ZiMWFXTFN0Y0hSdFU5WVhxN3FrZHovdnQvUmgxRmYyaFJ5MHhST2twK280M3V4cEJoSkNFWktiVDlRWGxUNTQ0aTJvVDdwQlFPZmZTYk5uc2RpTmMrMlZyN0VVQjhVQit0T0Zndmd2TkJObXNuNllLRzJYbVZRbXc0QjZ4MVQrVGhNRVB5bjZKa1VqMVltNkpZajZtaW10aGhweUplQUdhMS9kZlJRclVDN2QvZ0NKTEtiVytnclZFK1VpWWNlQVRXeEUyTzBkc0pQdnh0eEppYXJTMkNSWEJUUlUzZHZldTB1MXpFUUtWU3hXdHVnMGtJSmp6bWdCTEpwOE50WktHa20wRER3SU1FdEZyckVXdlBpKzlJUENtZ28rVSt3Q285T2h5QmdJUTVqK1dtMXFUbFJGQk1KeDQ2Ri94UXpYV3dJREFRQUI=
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: jwt-private-key
  name: jwt-private-key
type: Opaque

---
apiVersion: v1
data:
  backend-config.env: |
    PGUSER="admin"
    PGHOST="postgres"
    PGDATABASE="tasks"
    PGPORT=5432
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: backend
  name: backend-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert -o kubernetes-part
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: backend
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: backend
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: ./kompose convert -o kubernetes-part
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-part-db-network: "true"
        io.kompose.network/docker-part-frontend-network: "true"
        io.kompose.service: backend
    spec:
      containers:
        - env:
            - name: PGPASSWORD_FILE
              value: /run/secrets/pg-password
            - name: PUBLIC_KEY_FILE
              value: /run/secrets/jwt-private-key
          image: olhaya/backend:multiarch
          livenessProbe:
            exec:
              command:
                - curl
                - -f
                - http://localhost:3001/health
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          name: backend
          ports:
            - containerPort: 3001
              hostPort: 3001
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /config/backend-config.env
              name: backend-config
              subPath: backend-config.env
            - mountPath: /run/secrets/pg-password
              name: pg-password
            - mountPath: /run/secrets/jwt-private-key
              name: jwt-private-key
      restartPolicy: Always
      volumes:
        - configMap:
            items:
              - key: backend-config.env
                path: backend-config.env
            name: backend-config
          name: backend-config
        - name: pg-password
          secret:
            items:
              - key: pg-password
                path: pg-password
            secretName: pg-password
        - name: jwt-private-key
          secret:
            items:
              - key: jwt-private-key
                path: jwt-private-key
            secretName: jwt-private-key
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert -o kubernetes-part
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: frontend
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: frontend
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: ./kompose convert -o kubernetes-part
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-part-frontend-network: "true"
        io.kompose.service: frontend
    spec:
      containers:
        - image: olhaya/frontend:multiarch
          livenessProbe:
            exec:
              command:
                - curl
                - -f
                - http://localhost:3000
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          name: frontend
          ports:
            - containerPort: 3000
              hostPort: 3000
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert -o kubernetes-part
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: keycloak
  name: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: keycloak
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: ./kompose convert -o kubernetes-part
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-part-db-network: "true"
        io.kompose.network/docker-part-frontend-network: "true"
        io.kompose.service: keycloak
    spec:
      containers:
        - args:
            - start
            - --import-realm
          env:
            - name: KC_ADMIN
              value: admin
            - name: KC_ADMIN_PASSWORD
              value: admin
            - name: KC_DB
              value: postgres
            - name: KC_DB_PASSWORD
              value: password
            - name: KC_DB_URL
              value: jdbc:postgresql://postgres:5432/tasks
            - name: KC_DB_USERNAME
              value: admin
            - name: KC_HOSTNAME
              value: localhost
            - name: KC_HTTP_ENABLED
              value: "true"
          image: olhaya/keycloak:multiarch
          livenessProbe:
            exec:
              command:
                - /opt/keycloak/bin/kc.sh
                - show-config
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          name: keycloak
          ports:
            - containerPort: 8080
              hostPort: 8080
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /opt/keycloak/data
              name: keycloak-data
      restartPolicy: Always
      volumes:
        - name: keycloak-data
          persistentVolumeClaim:
            claimName: keycloak-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: keycloak-data
  name: keycloak-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert -o kubernetes-part
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: postgres
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: ./kompose convert -o kubernetes-part
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-part-db-network: "true"
        io.kompose.service: postgres
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: tasks
            - name: POSTGRES_PASSWORD_FILE
              value: /run/secrets/pg-password
            - name: POSTGRES_USER
              value: admin
          image: postgres:16-alpine
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - admin
                - -d
                - tasks
            failureThreshold: 5
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          name: postgres
          resources: {}
          volumeMounts:
            - mountPath: /run/secrets/pg-password
              name: pg-password
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
      restartPolicy: Always
      volumes:
        - name: pg-password
          secret:
            items:
              - key: pg-password
                path: pg-password
            secretName: pg-password
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: postgres-data
  name: postgres-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

